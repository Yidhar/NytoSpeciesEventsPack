namespace = GFnyto_global
#领袖招募1
country_event = {
	id = GFnyto_global.10
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		from = {
			species = {
				has_trait = trait_GF_nyto_ogas_agreement
			}
		}
	}
	immediate = {
		from = {
			if = {
				limit = {
					leader_class = admiral
				}
				add_trait = leader_admiral_trait_GF_nyto_ogas_agreement
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement
				break = yes
			}
			if = {
				limit = {
					leader_class = general
				}
				add_trait = leader_general_trait_GF_nyto_ogas_agreement
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement
				break = yes
			}
			if = {
				limit = {
					leader_class = governor
				}
				add_trait = leader_governor_trait_GF_nyto_ogas_agreement
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement
				break = yes
			}
			if = {
				limit = {
					leader_class = scientist
				}
				add_trait = leader_scientist_trait_GF_nyto_ogas_agreement
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement
				break = yes
			}
			if = {
				limit = {
					leader_class = ruler
				}
				add_trait = leader_trait_GF_nyto_ogas_agreement
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement
				break = yes
			}
		}
	}
}

#领袖招募1
country_event = {
	id = GFnyto_global.11
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		from = {
			species = {
				has_trait = trait_GF_nyto_ogas_agreement_plus
			}
		}
	}
	immediate = {
		from = {
			if = {
				limit = {
					leader_class = admiral
				}
				add_trait = leader_admiral_trait_GF_nyto_ogas_agreement_plus
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement_plus
				break = yes
			}
			if = {
				limit = {
					leader_class = general
				}
				add_trait = leader_general_trait_GF_nyto_ogas_agreement_plus
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement_plus
				break = yes
			}
			if = {
				limit = {
					leader_class = governor
				}
				add_trait = leader_governor_trait_GF_nyto_ogas_agreement_plus
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement_plus
				break = yes
			}
			if = {
				limit = {
					leader_class = scientist
				}
				add_trait = leader_scientist_trait_GF_nyto_ogas_agreement_plus
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement_plus
				break = yes
			}
			if = {
				limit = {
					leader_class = ruler
				}
				add_trait = leader_trait_GF_nyto_ogas_agreement_plus
				add_ruler_trait = leader_trait_GF_nyto_ogas_agreement_plus
				break = yes
			}
		}
	}
}

#领袖招募1
country_event = {
	id = GFnyto_global.12
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		from = {
			species = {
				has_trait = trait_GF_nyto_noussphere
			}
		}
	}
	immediate = {
		from = {
			if = {
				limit = {
					leader_class = admiral
				}
				add_trait = leader_admiral_trait_GF_nyto_noussphere
				add_ruler_trait = leader_trait_GF_nyto_noussphere
				break = yes
			}
			if = {
				limit = {
					leader_class = general
				}
				add_trait = leader_general_trait_GF_nyto_noussphere
				add_ruler_trait = leader_trait_GF_nyto_noussphere
				break = yes
			}
			if = {
				limit = {
					leader_class = governor
				}
				add_trait = leader_governor_trait_GF_nyto_noussphere
				add_ruler_trait = leader_trait_GF_nyto_noussphere
				break = yes
			}
			if = {
				limit = {
					leader_class = scientist
				}
				add_trait = leader_scientist_trait_GF_nyto_noussphere
				add_ruler_trait = leader_trait_GF_nyto_noussphere
				break = yes
			}
			if = {
				limit = {
					leader_class = ruler
				}
				add_trait = leader_trait_GF_nyto_noussphere
				add_ruler_trait = leader_trait_GF_nyto_noussphere
				break = yes
			}
		}
	}
}

#认知灌注
# country_event = {
# 	id = GFnyto_global.21
# 	desc = GFnyto_global.21.desc
# 	picture = GFX_evt_mining_station
# 	is_triggered_only = yes
# 	immediate = {
# 		export_resource_income_to_variable = {
# 			resource = GF_nyto_training_key
# 			variable = has_training_key_num
# 		}
# 		random_owned_leader = {
# 			limit = {
# 				species = {
# 					is_species_class = nyto
# 				}
# 				NOT = {
# 					has_leader_flag = GFnyot_leader_select					
# 				}
# 				NOT = {
# 					has_skill < 10
# 				}
# 			}
# 			set_leader_flag = GFnyot_leader_select
# 			save_global_event_target_as = GFnyot_leader_select_1
# 		}
# 		random_owned_leader = {
# 			limit = {
# 				species = {
# 					is_species_class = nyto
# 				}
# 				NOT = {
# 					has_leader_flag = GFnyot_leader_select
# 				}
# 				NOT = {
# 					has_skill < 10
# 				}
# 			}
# 			set_leader_flag = GFnyot_leader_select
# 			save_global_event_target_as = GFnyot_leader_select_2
# 		}
# 		random_owned_leader = {
# 			limit = {
# 				species = {
# 					is_species_class = nyto
# 				}
# 				NOT = {
# 					has_leader_flag = GFnyot_leader_select
# 				}
# 				NOT = {
# 					has_skill < 10
# 				}
# 			}
# 			set_leader_flag = GFnyot_leader_select
# 			save_global_event_target_as = GFnyot_leader_select_3
# 		}
# 		random_owned_leader = {
# 			limit = {
# 				species = {
# 					is_species_class = GF_nyto_eild_attack_begin
# 				}
# 				NOT = {
# 					has_leader_flag = GFnyot_leader_select
# 				}
# 				NOT = {
# 					has_skill < 10
# 				}
# 			}
# 			set_leader_flag = GFnyot_leader_select
# 			save_global_event_target_as = GFnyot_leader_select_4
# 		}
# 	}
# 	option = {
# 		name = GFnyto_global.2.1
# 		trigger = {
# 			exists = event_target:GFnyot_leader_select_1
# 		}
# 		every_owned_leader = {
# 			remove_leader_flag = GFnyot_leader_select
# 		}
# 		event_target:GFnyot_leader_select_1 = {
# 			leader_event = {
# 				id = GFnyto_global.3
# 			}
# 		}
# 	}
# 	option = {
# 		name = GFnyto_global.2.2
# 		trigger = {
# 			exists = event_target:GFnyot_leader_select_2
# 		}
# 		every_owned_leader = {
# 			remove_leader_flag = GFnyot_leader_select
# 		}
# 		event_target:GFnyot_leader_select_2 = {
# 			leader_event = {
# 				id = GFnyto_global.3
# 			}
# 		}
# 	}
# 	option = {
# 		name = GFnyto_global.2.3
# 		trigger = {
# 			exists = event_target:GFnyot_leader_select_3
# 		}
# 		every_owned_leader = {
# 			remove_leader_flag = GFnyot_leader_select
# 		}
# 		event_target:GFnyot_leader_select_3 = {
# 			leader_event = {
# 				id = GFnyto_global.3
# 			}
# 		}
# 	}
# 	option = {
# 		name = GFnyto_global.2.4
# 		trigger = {
# 			exists = event_target:GFnyot_leader_select_4
# 		}
# 		event_target:GFnyot_leader_select_4 = {
# 			add_trait = leader_admiral_trait_GF_nyto_ogas_agreement_plus
# 		}
# 		every_owned_leader = {
# 			remove_leader_flag = GFnyot_leader_select
# 		}
# 		event_target:GFnyot_leader_select_4 = {
# 			leader_event = {
# 				id = GFnyto_global.3
# 			}
# 		}
# 	}
# 	option = {
# 		trigger = {
# 			exists = event_target:GFnyot_leader_select_1
# 			exists = event_target:GFnyot_leader_select_2
# 			exists = event_target:GFnyot_leader_select_3
# 			exists = event_target:GFnyot_leader_select_4
# 		}
# 		name = GFnyto_global.2.NEXT		#下一页刷新
# 		clear_global_event_target = GFnyot_leader_select_1
# 		clear_global_event_target = GFnyot_leader_select_2
# 		clear_global_event_target = GFnyot_leader_select_3
# 		clear_global_event_target = GFnyot_leader_select_4
# 		country_event = {
# 			id = GFnyto_global.21
# 		}
# 	}
# 	option = {
# 		name = GFnyto_global.2.exists
# 		every_owned_leader = {
# 			remove_leader_flag = GFnyot_leader_select
# 		}
# 		clear_global_event_target = GFnyot_leader_select_1
# 		clear_global_event_target = GFnyot_leader_select_2
# 		clear_global_event_target = GFnyot_leader_select_3
# 		clear_global_event_target = GFnyot_leader_select_4
# 	}
# }

country_event = {
	id = GFnyto_global.21
	desc = GFnyto_global.21.desc
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = owner
		room = enclave_curator_room
	}
	option = { #科学家
		name = GFnyto_global.21.a
	}
	option = { #陆军
		name = GFnyto_global.21.b
	}
	option = { #舰队
		name = GFnyto_global.21.c
	}
	option = { #总督
		name = GFnyto_global.21.e
	}
	option = { #统治者
		name = GFnyto_global.21.f
	}
}

country_event ={
	id = GFnyto_global.22
	desc = GFnyto_global.21.desc
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = owner
		room = enclave_curator_room
	}
	immediate = {
		random_owned_leader = {
			limit = {
				NOT = {
					has_leader_flag = GFnyot_leader_select
				}
				has_skill < 10
				leader_class = scientist
			}
			set_leader_flag = GFnyot_leader_select
			save_event_target_as = GFnyot_leader_select_1
		}
		random_owned_leader = {
			limit = {
				NOT = {
					has_leader_flag = GFnyot_leader_select
				}
				has_skill < 10
				leader_class = scientist
			}
			set_leader_flag = GFnyot_leader_select
			save_event_target_as = GFnyot_leader_select_2
		}
		random_owned_leader = {
			limit = {
				NOT = {
					has_leader_flag = GFnyot_leader_select
				}
				has_skill < 10
				leader_class = scientist
			}
			set_leader_flag = GFnyot_leader_select
			save_event_target_as = GFnyot_leader_select_3
		}
		random_owned_leader = {
			limit = {
				NOT = {
					has_leader_flag = GFnyot_leader_select
				}
				has_skill < 10
				leader_class = scientist
			}
			set_leader_flag = GFnyot_leader_select
			save_event_target_as = GFnyot_leader_select_4
		}
		random_owned_leader = {
			limit = {
				NOT = {
					has_leader_flag = GFnyot_leader_select
				}
				has_skill < 10
				leader_class = scientist
			}
			set_leader_flag = GFnyot_leader_select
			save_event_target_as = GFnyot_leader_select_5
		}
		random_owned_leader = {
			limit = {
				NOT = {
					has_leader_flag = GFnyot_leader_select
				}
				has_skill < 10
				leader_class = scientist
			}
			set_leader_flag = GFnyot_leader_select
			save_event_target_as = GFnyot_leader_select_6
		}
	}
	option = {
		trigger = {
			exists = event_target:GFnyot_leader_select_1
		}
		name = GFnyto_global.22.a
	}
	option = {
		trigger = {
			exists = event_target:GFnyot_leader_select_2
		}
		name = GFnyto_global.22.b
	}
	option = {
		trigger = {
			exists = event_target:GFnyot_leader_select_3
		}
		name = GFnyto_global.22.c
	}
	option = {
		trigger = {
			exists = event_target:GFnyot_leader_select_4
		}
		name = GFnyto_global.22.d
	}
	option = {
		trigger = {
			exists = event_target:GFnyot_leader_select_5
		}
		name = GFnyto_global.22.e
	}
	option = {
		trigger = {
			exists = event_target:GFnyot_leader_select_6
		}
		name = GFnyto_global.22.f
	}
	option = {
		name = GFnyto_global.22.next
		country_event = {
			id = GFnyto_global.22
		}
	}
	option = {
		name = GFnyto_global.22.prev
		country_event = {
			id = GFnyto_global.21
		}
	}
	option = {
		name = GFnyto_global.22.close
		default_hide_option = yes
		break = yes
	}
}

leader_event = {
	id = GFnyto_global.23
	desc = GFnyto_global.21.desc
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = owner
		room = enclave_curator_room
	}
	immediate = {
		export_trigger_value_to_variable = {
			trigger = has_skill
			variable = GFnyto_leader_lv
		}
	}
	option = {
		name = GFnyto_global.23.a
	}
	option = {
		name = GFnyto_global.23.b
	}
	option = {
		name = GFnyto_global.23.c
	}
	option = {
		name = GFnyto_global.23.d
	}
	option = {
		name = GFnyto_global.23.e
	}
	option = {
		name = GFnyto_global.23.prev
	}
	option = {
		name = GFnyto_global.23.close
	}
}


#替换地块
planet_event = {
	id = GFnyto_global.4
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		owner = {
			has_authority = auth_GF_paradeus
		}
		owner_main_species = {
			has_trait = trait_GFnyto_tanhua
		}
	}
	immediate = {
		add_deposit = d_GFnyto_tanhua
	}
}

#年检通用延迟事件
country_event = {
	id = GFnyto_global.9999
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		has_authority = auth_GF_paradeus
	}
	immediate = {
		if = {
			limit = {
				any_owned_planet = {
					has_building = building_GFnyto_Elids
					num_assigned_jobs = {
						job = GFnyto_collapse_changer
						value > 0
					}
				}
			}
			country_event = {
				id = GFnyto_global.9
				days = 25
			}
		}
		#花期
		if = {
			limit = {
				has_authority = auth_GF_paradeus
			}
			country_event = {
				id = GFnyto_global.16
				days = 5
			}
		}
		country_event = {
			id = GFnyto_global.14
			days = 150
		}
	}
}

#花期条件检测
country_event = {
	id = GFnyto_global.16
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		any_owned_planet = {
			NAND = {
				num_assigned_jobs = {
					job = GFnyto_Epiphyllum_job
					value < 1
				}
				check_variable = {
					which = GFnyto_plante_wrlv
					value < 100
				}
				NOT = {
					has_planet_flag = GF_nyto_eild_attack_begin
				}
			}
			OR = {
				NOT = {
					has_planet_flag = GFnyto_no_tanhua
				}
				num_assigned_jobs = {
					job = GFnyto_Epiphyllum_job
					value > 1
				}
				has_planet_flag = GF_nyto_eild_attack_begin
			}
		}
	}
	immediate = {
		if = {
			limit = {
				has_country_flag = hide_GFnytoeild52
			}
			country_event = {
				id = GFnytoeild.51
				days = 5
			}
		}
		else = {
			country_event = {
				id = GFnytoeild.52
				days = 5
			}
		}
	}
}



#每次花期时 击杀一个昙花种植者
planet_event = {
	id = GFnyto_global.5
	picture = GFX_evt_GFnyto_global.5
	is_triggered_only = yes
	hide_window = no
	title = GFnyto_global.5
	desc = GFnyto_global.5.desc
	trigger = {
		owner = {
			has_civic = civic_Gf_nyto_tanhua_pluse
		}
		num_assigned_jobs = {
			job = GFnyto_Epiphyllum_job
			value > 0
		}
	}
	immediate = {
		if = {
			limit = {
				num_assigned_jobs = {
					job = GFnyto_Epiphyllum_job
					value > 0
				}
			}
			save_event_target_as = GFnyto_random_plante
			random_owned_pop = {
				limit = {
					has_job = GFnyto_Epiphyllum_job
				}
				kill_pop = yes
			}
		}
	}
	option = {
		name = "GFnyto_global.5a"
	}
	option = {
		name = "GFnyto_global.5b"
		custom_tooltip = GFnyto_global.5b.desc
		owner = {
			set_country_flag = GFnyto_global.5_hide
		}
	}
}

planet_event = {
	id = GFnyto_global.6
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		owner = {
			has_civic = civic_Gf_nyto_tanhua_pluse
		}
	}
	immediate = {
		if = {
			limit = {
				num_assigned_jobs = {
					job = GFnyto_Epiphyllum_job
					value > 0
				}
			}
			random_owned_pop = {
				limit = {
					has_job = GFnyto_Epiphyllum_job
				}
				kill_pop = yes
			}
		}
	}
}

#每年击杀三个受洗者岗 转换成一个eild人口 延期 25d
country_event = {
	id = GFnyto_global.9
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		every_owned_planet = {
			limit = {
				num_assigned_jobs = {
					job = GFnyto_collapse_changer
					value > 0
				}
			}
			while = {
				count = 3
				random_owned_pop = {
					limit = {
						has_job = GFnyto_collapse_changer
					}
					kill_pop = yes
				}
			}
			create_pop = {
				species = event_target:GFnyto_ELID_infected
				ethos = owner
			}
		}
	}
}

#每年塌缩辐射污染度计算 #不包含昙花
country_event = {
	id = GFnyto_global.14
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		has_authority = auth_GF_paradeus
	}
	immediate = {
		every_owned_planet = {
			limit = {
				OR = {
					num_assigned_jobs = {
						job = GFnyto_collapse_particle_rar
						value > 0
					}
					num_assigned_jobs = {
						job = GFnyto_collapse_particle_zip
						value > 0
					}
					is_variable_set = GFnyto_plante_wrlv
				}
			}
			#初始星球恢复力
			set_variable = {
				which = planet_size
				value = trigger:planet_size
			}
			#岗位污染度产出
			if = {
				limit = {
					OR = {
						any_owned_pop = {
							OR = {
								has_job = GFnyto_collapse_particle_rar
								has_job = GFnyto_collapse_particle_zip
							}
						}
						is_variable_set = GFnyto_plante_wrlv
					}
				}
				export_trigger_value_to_variable = {
					trigger = num_assigned_jobs
					parameters = {
						job = GFnyto_Epiphyllum_job
					}
					variable = Epiphyllum_job_num
				}
				export_trigger_value_to_variable = {
					trigger = num_assigned_jobs
					parameters = {
						job = GFnyto_collapse_particle_rar
					}
					variable = collapse_particle_rar_num
				}
				export_trigger_value_to_variable = {
					trigger = num_assigned_jobs
					parameters = {
						job = GFnyto_collapse_particle_zip
					}
					variable = collapse_particle_zip_num
				}
				multiply_variable = {
					which = Epiphyllum_job_num
					value = -0.25
				}
				multiply_variable = {
					which = collapse_particle_rar_num
					value = 2
				}
				multiply_variable = {
					which = collapse_particle_zip_num
					value = 2
				}
			}
			# 星球恢复力衰减
			if = {
				limit = {
					check_variable = {
						which = GFnyto_plante_wrlv
						value >= 30
					}
				}
				set_variable = {
					which = planet_size_down
					value = GFnyto_plante_wrlv
				}
				change_variable = {
					which = planet_size_down
					value = -100
				}
				multiply_variable = {
					which = planet_size_down
					value = -0.015
				}
				multiply_variable = {
					which = planet_size
					value = planet_size_down
				}
			}
			#中和塔提供的净化力
			if = {
				limit = {
					has_building = building_GFnyto_affluence_center
				}
				export_trigger_value_to_variable = {
					trigger = num_buildings
					parameters = {
						type = building_GFnyto_affluence_center
					}
					variable = has_affluence_num
				}
				set_variable = {
					which = affluence_center_purify
					value = has_affluence_num
				}
				multiply_variable = {
					which = affluence_center_purify
					value = 5
				}
			}
			#计算污染度
			if = {
				limit = {
					NOR = {
						is_planet_class = pc_GF_nyto_embers_gloomy
						is_planet_class = pc_GF_nyto_devil_furnace
						check_variable = {
							which = GFnyto_plante_wrlv
							value > 0
						}
					}
				}
				if = {
					limit = {
						check_variable_arithmetic = {
							subtract = planet_size
							which = GFnyto_plante_wrlv
							value < 0
						}
					}
					set_variable = {
						which = GFnyto_plante_wrlv
						value = 0
					}
				}
				else = {
					subtract_variable = {
						which = GFnyto_plante_wrlv
						value = planet_size
					}
				}
			}
			#星球自我恢复不会将污染度减少到0以下		
			if = {
				limit = {
					check_variable_arithmetic = {
						subtract = affluence_center_purify
						which = GFnyto_plante_wrlv
						value < -5
					}
				}
				set_variable = {
					which = GFnyto_plante_wrlv
					value = -5
				}
			}
			else = {
				subtract_variable = {
					which = GFnyto_plante_wrlv
					value = affluence_center_purify
				}
			}
			#中和塔不会将污染度降低到-5以下
			change_variable = {
				which = GFnyto_plante_wrlv
				value = collapse_particle_zip_num
			}
			change_variable = {
				which = GFnyto_plante_wrlv
				value = collapse_particle_rar_num
			}
			change_variable = {
				which = GFnyto_plante_wrlv
				value = Epiphyllum_job_num
			}
			if = {
				limit = {
					check_variable = {
						which = GFnyto_plante_wrlv
						value > 1000
					}
				}
				set_variable = {
					which = GFnyto_plante_wrlv
					value = 1000
				}
			}
			#刷新buff
			if = {
				limit = {
					is_planet_class = pc_GF_nyto_embers_gloomy
				}
				if = {
					limit = {
						has_modifier = GF_nyto_Radiation
					}
					remove_modifier = GF_nyto_Radiation
				}
				remove_modifier = GF_nyto_Radiation2
				add_modifier = {
					modifier = GF_nyto_Radiation2
					multiplier = GFnyto_plante_wrlv
				}
			}
			else_if = {
				limit = {
					NOT = {
						is_planet_class = pc_GF_nyto_embers_gloomy
						is_planet_class = pc_GFnyto_portal_star
						is_planet_class = pc_GF_nyto_devil_furnace
					}
				}
				remove_modifier = GF_nyto_Radiation
				add_modifier = {
					modifier = GF_nyto_Radiation
					multiplier = GFnyto_plante_wrlv
				}
			}
			#非塌缩星球 污染度到底200时 转变为塌缩星球
			if = {
				limit = {
					check_variable = {
						which = GFnyto_plante_wrlv
						value >= 200
					}
					NOR = {
						is_planet_class = pc_GF_nyto_embers_gloomy
						is_planet_class = pc_GF_nyto_devil_furnace
						is_planet_class = pc_GFnyto_portal_star
						is_planet_class = pc_ringworld_habitable
						is_planet_class = pc_ringworld_tech
					}
				}
				change_pc = pc_GF_nyto_embers_gloomy
				remove_modifier = GF_nyto_Radiation
				add_modifier = {
					modifier = GF_nyto_Radiation2
					multiplier = GFnyto_plante_wrlv
				}
			}
		}
	}
}

#获得新球时初始话污染度
planet_event = {
	id = GFnyto_global.15
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		this = {
			is_planet_class = pc_GF_nyto_embers_gloomy
			NOT = {
				has_modifier = GF_nyto_Radiation2
			}
		}
	}
	immediate = {
		set_variable = {
			which = GFnyto_plante_wrlv
			value = 50
		}
		add_modifier = {
			modifier = GF_nyto_Radiation2
			multiplier = GFnyto_plante_wrlv
		}
	}
}
